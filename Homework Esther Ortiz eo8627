library(tidyverse)
library(ggplot2)
library(dplyr)

profs <- read.csv("C:\\Users\\esthe\\Desktop\\SDS315\\profs.csv")

head(profs)
summary(profs$eval)

#Part A

histogram1 <- ggplot(profs) + 
  geom_histogram(aes(x = eval), binwidth = 0.2, color = "black") +
  scale_x_continuous(limits = c(0, 5), breaks = seq(1, 5, 0.5)) +
  labs(title = "Distribution of Course Evaluation Scores",
       x = "Evaluation Score",
       y = "Frequency") +
  theme_minimal()

print(histogram1)

# Part B

boxplot1 <- ggplot(profs) + 
  geom_boxplot(aes(y = eval, x = native)) +
  labs(title = "Evaluation Scores by English Speaker Status",
       y = "Evaluation Score",
       x = "Native") +
  scale_x_discrete(labels = c("Non-Native", "Native"))
print(boxplot1)

# Part C
facetedhistogram1 <- ggplot(profs) + 
  geom_histogram(aes(x=eval)) + 
  facet_wrap(~gender, nrow=2) +
  labs(title = "Evaluation Score Distribution by Gender",
       x = "Evaluation Score",
       y = "Frequency")

plot(facetedhistogram1)

# Part D
scatterplot1 <- ggplot(profs) + 
  geom_point(aes(x=beauty, y=eval)) + 
  labs(title = "Relationship Between Attractiveness and Evaluation Scores",
     x = "Attractiveness (Beauty)",
     y = "Evaluation Score")
print(scatterplot1)

#________________________Second exercise
library(mosaic)
bikeshare <- read.csv("C:\\Users\\esthe\\Desktop\\SDS315\\bikeshare.csv")
head(bikeshare)
#Plot A
bikeshare_summary <- bikeshare %>%
  group_by(hr) %>%
  summarize(avg_rentals = mean(total))

ggplot(bikeshare_summary, aes(x = hr, y = avg_rentals)) +
  geom_line(color = "blue", size = 1) + 
  labs(title = "Average Hourly Bike Rentals",
       x = "Hour of the Day",
       y = "Average Rentals") +
  theme_minimal()

#Plot B
bikeshare_summary <- bikeshare %>%
  group_by(hr, workingday) %>%
  summarize(avg_rentals = mean(total))

ggplot(bikeshare_summary, aes(x = hr, y = avg_rentals,color = as.factor(workingday))) +
  
geom_line() +
  facet_wrap(~ workingday, nrow=1) +
  labs(title = "Average Hourly Bike Rentals by Working Day",
       x = "Hour of the Day",
       y = "Average Rentals",
       color = "Working Day",) +
  theme_minimal()
#Plot C
bikeshare_9am <- bikeshare %>%
  filter(hr == 9) %>%
  group_by(weathersit, workingday) %>%
  summarize(avg_rentals = mean(total))

# Create the bar plot with labels
ggplot(bikeshare_9am, aes(x = factor(weathersit), y = avg_rentals, fill = factor(workingday))) +
  geom_col(position = "dodge") +  # Bar plot with grouped bars
  scale_x_discrete(labels = c(
    "1" = "Clear",
    "2" = "Mist",
    "3" = "Rain",
    "4" = "Snow"
  )) +
  scale_fill_manual(values = c("0" = "red", "1" = "blue"),
                    labels = c("0" = "Non-Working Day", "1" = "Working Day")) +
  labs(title = "Average 9 AM Rentals by Weather and Working Day",
       x = "Weather Situation",
       y = "Average Rentals",
       fill = "Day Type") +
  theme_minimal()

#________________________Third exercise
capmetro_UT = read.csv("C:\\Users\\esthe\\Desktop\\SDS315\\capmetro_UT.csv")
head(capmetro_UT)
  
capmetro_UT = mutate(capmetro_UT,
                     day_of_week = factor(day_of_week,
                                          levels=c("Mon", "Tue", "Wed","Thu", "Fri", "Sat", "Sun")),
                     month = factor(month,
                                    levels=c("Sep", "Oct","Nov")))
colnames(capmetro_UT)

#Part A
capmetro_summary <- capmetro_UT %>%
  group_by(day_of_week, hour_of_day, month) %>%
  summarise(avg_boardings = mean(boarding))

ggplot(capmetro_summary, aes(x = hour_of_day, y = avg_boardings, color = month)) +
  geom_line(size = 1.2) +  # Thicker lines for better readability
  facet_wrap(~ day_of_week, nrow = 2) +  # Facets for each day
  scale_x_continuous(breaks = seq(6, 21, by = 3)) +  # Show labels every 3 hours
  labs(
    title = "Average Boardings by Hour and Day of the Week",
    subtitle = "Comparison of ridership trends across months",
    x = "Hour of the Day",
    y = "Average Boardings",
    color = "Month"
  ) +
  theme_minimal()

#Part B
boarding_summary <- capmetro_UT %>%
  group_by(temperature, hour_of_day, weekend) %>%
  summarize(average_boardings = mean(boarding))

# Create the faceted scatter plot
ggplot(boarding_summary, aes(x = temperature, y = average_boardings, color = as.factor(weekend))) +
  geom_point(alpha = 0.4, size = 1.5) +  # Reduce opacity & point size to avoid clutter
  facet_wrap(~ hour_of_day, ncol = 4) +  # Arrange facets in a structured grid
  scale_x_continuous(limits = c(30, 110), breaks = seq(30, 110, by = 20)) +  # Ensure consistent x-axis
  scale_color_manual(values = c("red", "blue"), labels = c("Weekday", "Weekend")) +  # Improve legend labels
  labs(
    title = "Boardings vs. Temperature by Hour of Day",
    subtitle = "UT Shuttle Ridership Trends: Comparing Weekdays and Weekends",
    x = "Temperature (Â°F)",
    y = "Average Boardings",
    color = "Day Type"
  ) +
  theme_minimal() +
  theme(
    panel.grid.major = element_line(color = "gray80"),  # Keep major gridlines
    axis.text.x = element_text(size = 10),
    legend.position = "right"
  )

#________________________Exercise 4

#Part A
billboard <- read.csv("C:\\Users\\esthe\\Desktop\\SDS315\\billboard.csv")

top_songs <- billboard %>%
  group_by(performer, song) %>%
  summarise(total_weeks = n(), .groups = "drop") %>%
  arrange(desc(total_weeks)) %>%
  head(10)  


library(knitr)
kable(top_songs, caption = "Top 10 Songs with the Most Weeks on Billboard Top 100")

#Part B
music_diversity <- billboard %>%
  filter(year > 1958 & year < 2021) %>%
  group_by(year) %>%
  summarise(unique_songs = n_distinct(song), .groups = "drop")


ggplot(music_diversity, aes(x = year, y = unique_songs)) +
  geom_line(color = "blue", size = 1) +
  labs(
    title = "Musical Diversity in Billboard Top 100 Over Time",
    subtitle = "Measured by the number of unique songs appearing each year",
    x = "Year",
    y = "Unique Songs in Billboard Top 100"
  ) +
  theme_minimal()

#Part C
library(forcats)  # Needed for fct_reorder

# Count the number of "ten-week hits" per artist
ten_week_hits <- billboard %>%
  group_by(performer, song) %>%
  summarise(total_weeks = n(), .groups = "drop") %>%
  filter(total_weeks >= 10) %>%  
  group_by(performer) %>%
  summarise(ten_week_hits = n(), .groups = "drop") %>%
  filter(ten_week_hits >= 30) %>%  
  arrange(desc(ten_week_hits))

# Create a bar plot
ggplot(ten_week_hits, aes(x = fct_reorder(performer, ten_week_hits), y = ten_week_hits)) +
  geom_col(fill = "blue") +
  coord_flip() + 
  labs(
    title = "Top 19 Artists with the Most 'Ten-Week Hits'",
    subtitle = "Artists with at least 30 songs that lasted 10+ weeks on Billboard Top 100",
    x = "Artist",
    y = "Number of Ten-Week Hits"
  ) +
  theme_minimal()
